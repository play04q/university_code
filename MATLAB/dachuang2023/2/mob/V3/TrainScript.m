parentDir = './-10dB_2_10dB';
dataDir = 'WVD';
folders = fullfile(parentDir,dataDir,{'Rect','LFM','NLFM','BPSK','QPSK','BFSK','QFSK'});


imds = imageDatastore(folders,...
    'FileExtensions','.png','LabelSource','foldernames','ReadFcn',@readTFDForSqueezeNet);
[imdsTrain,imdsTest,imdsValidation] = splitEachLabel(imds,0.8,0.1);
numClasses = 7;

net = importNetworkFromPyTorch('model.pt');
inputLayer1 = imageInputLayer([227 227 3], Normalization="none");
net = addInputLayer(net, inputLayer1, Initialize=true); 
lgraph = layerGraph(net);
newLearnableLayer = fullyConnectedLayer(numClasses, ...
    'Name','TopLevelModule_classifier_3', ...
    'WeightLearnRateFactor',10, ...
    'BiasLearnRateFactor',10);
    
lgraph = replaceLayer(lgraph,'TopLevelModule_classifier_3',newLearnableLayer);
ll = [softmaxLayer('Name', 'new_softmax'); classificationLayer('Name','new_classoutput')];
lgraph = addLayers(lgraph, ll);
lgraph = connectLayers(lgraph,'TopLevelModule_classifier_3','new_softmax');
options = trainingOptions('sgdm', ...
    'MiniBatchSize',64, ...
    'MaxEpochs',10, ...
    'InitialLearnRate',1e-3, ...
    'Shuffle','every-epoch', ...
    'Verbose',false, ...
    'Plots','training-progress',...
    'ExecutionEnvironment','auto',...
    'ValidationData',imdsValidation);

trainedNet = trainNetwork(imdsTrain,lgraph,options);

save('myNetwork.mat', 'trainedNet');