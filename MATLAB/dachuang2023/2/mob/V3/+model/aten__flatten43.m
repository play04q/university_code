classdef aten__flatten43 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__flatten43 Auto-generated custom layer
    % Auto-generated by MATLAB on 2024-02-25 23:48:23
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        flatten_14
        
        
        flatten_15
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__flatten43(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [flatten_input_1] = predict(obj,flatten_12)
            
            if ~contains(dims(flatten_12),'U')
                [flatten_12] = struct('value', flatten_12, 'rank', ndims(flatten_12));
            else
                [flatten_12] = struct('value', flatten_12, 'rank', int64(ndims(flatten_12)));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'flatten_12', 'aten__flatten43'));
            end
            
            import model.ops.*;
            
            [flatten_14] = makeStructForConstant(int64(obj.flatten_14), int64(0), "Typed");
            [flatten_15] = makeStructForConstant(int64(obj.flatten_15), int64(0), "Typed");
            [flatten_input_1] = pyFlatten(flatten_12, flatten_14, flatten_15);
            
            [flatten_input_1] = labelWithPropagatedFormats(flatten_input_1, "*C");
            flatten_input_1 = flatten_input_1.value ;
            
        end
        
        
        
        function [flatten_input_1] = forward(obj,flatten_12)
            
            if ~contains(dims(flatten_12),'U')
                [flatten_12] = struct('value', flatten_12, 'rank', ndims(flatten_12));
            else
                [flatten_12] = struct('value', flatten_12, 'rank', int64(ndims(flatten_12)));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'flatten_12', 'aten__flatten43'));
            end
            
            import model.ops.*;
            
            [flatten_14] = makeStructForConstant(int64(obj.flatten_14), int64(0), "Typed");
            [flatten_15] = makeStructForConstant(int64(obj.flatten_15), int64(0), "Typed");
            [flatten_input_1] = pyFlatten(flatten_12, flatten_14, flatten_15);
            
            [flatten_input_1] = labelWithPropagatedFormats(flatten_input_1, "*C");
            flatten_input_1 = flatten_input_1.value ;
            
        end
        
        
    end
end

