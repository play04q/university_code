classdef aten__add_40 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch
    %aten__add_40 Auto-generated custom layer
    % Auto-generated by MATLAB on 2024-03-29 21:50:34
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        add_8
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__add_40(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [add_input_1] = predict(obj,add_6, add_argument1_1)
            import model.ops.*;
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [add_6, add_6_format] = permuteToReversePyTorch(add_6, 'BCSS', 4);
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [add_argument1_1, add_argument1_1_format] = permuteToReversePyTorch(add_argument1_1, 'BCSS', 4);
            [add_6] = struct('value', add_6, 'rank', int64(4));
            [add_argument1_1] = struct('value', add_argument1_1, 'rank', int64(4));
            
            [add_8] = makeStructForConstant(int64(obj.add_8), int64(0), "Typed");
            [add_input_1] = pyElementwiseBinary(add_6, add_argument1_1, 'plus', add_8);
            
            [add_input_1] = labelWithPropagatedFormats(add_input_1, "BCSS");
            add_input_1 = add_input_1.value ;
            
        end
        
        
        
        function [add_input_1] = forward(obj,add_6, add_argument1_1)
            import model.ops.*;
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [add_6, add_6_format] = permuteToReversePyTorch(add_6, 'BCSS', 4);
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [add_argument1_1, add_argument1_1_format] = permuteToReversePyTorch(add_argument1_1, 'BCSS', 4);
            [add_6] = struct('value', add_6, 'rank', int64(4));
            [add_argument1_1] = struct('value', add_argument1_1, 'rank', int64(4));
            
            [add_8] = makeStructForConstant(int64(obj.add_8), int64(0), "Typed");
            [add_input_1] = pyElementwiseBinary(add_6, add_argument1_1, 'plus', add_8);
            
            [add_input_1] = labelWithPropagatedFormats(add_input_1, "BCSS");
            add_input_1 = add_input_1.value ;
            
        end
        
        
    end
end

